#ifndef __T_MATRIX_H___
#define __T_MATRIX_H___

#include <assert.h>
#include <iostream>
#include <vector>
#include <cstdlib>


template<typename T>

class Matrix{
private:
  int numRows;
  int numColumns;
  std::vector<T>** rows;
public:
  Matrix(){
    numRows = 0;
    numColumns = 0; 
    rows = NULL;
  }
  Matrix(int r, int c) {
    numRows = r;
    numColumns = c;
    rows = new vector<T>*[r];
    for(int i =0;i<r;i++){
      rows[i] = new vector<T>(c);    
    }       
  }

  Matrix(const Matrix<T> & rhs){
    numRows = rhs.numRows;
    numColumns = rhs.numColumns;
    rows = new vector<T>*[numRows];
    for(int i=0; i<numRows;i++){
      rows[i] = new vector(*rhs.rows[i]);
    }
  }

  ~Matrix() {
    for(int i=0;i<numRows;i++){
      delete rows[i];
    }
    delete[] rows;
  }

  Matrix<T> &operator=(const Matrix<T> & rhs) {
    if(*this == rhs){
      return *this;
    }
    numRows =rhs.numRows;
    numColumns = rhs.numColumns;
    //
    rows = new vector<T>*[numRows];
    for(int i=0;i<numRows;i++){
      rows[i] = new vector<T>(*rhs.rows[i]);
    }
  
    return *this;
  }

  int getRows() const {
    return numRows;
  }
  int getColumns() const {
    return numColumns;
  }
  std::vector<T> & operator[](int index) const {
    assert(index>=0 && index<numRows);
    return *rows[index];
  }

  bool operator==(const Matrix<T> & rhs) const {
    if(numRows == rhs.numRows){
      if(numColumns == rhs.numColumns){
	for(int i=0; i<numRows;i++){
	  for(int j=0;j<numColumns;j++){
	    if((*rows[i])[j] != (*rhs.rows[i])[j]){
	      return false; 
	      break;	  
	    }
	  }
	}
	return true;
      }
      return false;
    }
    return false;
  }

  Matrix<T> operator+(const Matrix<T> & rhs) const {
    assert((numRows == rhs.numRows)&&(numColumns ==rhs.numColumns));
    /*IntMatrix* answer = new IntMatrix(rhs);
      answer.rows = new IntArray*[numRows];

      for(int i=0; i<numRows;i++){
      answer.rows[i] = new IntArray(numColumns);
      }
    */
    Matrix<T> answer;
    answer.numRows = numRows;
    answer.numColumns = numColumns;
    answer.rows = new vector<T>*[numRows];
    for(int i=0; i<numRows;i++){
      answer.rows[i] = new vector(*rhs.rows[i]);
    }
    for(int i=0;i<numRows;i++){
      for(int j=0;j<numColumns;j++){
	answer[i][j] = rhs[i][j] + (*rows[i])[j];
      }
    }
  
    return answer;

  }

};
std::ostream & operator<<(std::ostream & s, const Matrix<T> & rhs) { 
  s<<"[";
  for(int i=0;i<rhs.getRows();i++){
    if(i<rhs.getRows()-1){
      s<<rhs[i]<<",";
    }
    s<<rhs[rhs.getRows()-1];
  }
  s <<"]";
  return s;
}
