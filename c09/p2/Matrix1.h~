#ifndef __T_MATRIX_H___
#define __T_MATRIX_H___

#include <assert.h>
#include <iostream>
#include <vector>
#include <cstdlib>

class Matrix{
IntMatrix::IntMatrix(){
  numRows = 0;
  numColumns = 0; 
  rows = NULL;
}
IntMatrix::IntMatrix(int r, int c) {
  numRows = r;
  numColumns = c;
  rows = new IntArray*[r];
  for(int i =0;i<r;i++){
    rows[i] = new IntArray(c);    
  }       
}

IntMatrix::IntMatrix(const IntMatrix & rhs){
  numRows = rhs.numRows;
  numColumns = rhs.numColumns;
  rows = new IntArray*[numRows];
  for(int i=0; i<numRows;i++){
    rows[i] = new IntArray(*rhs.rows[i]);
  }
}

IntMatrix::~IntMatrix() {
  for(int i=0;i<numRows;i++){
    delete rows[i];
  }
  delete[] rows;
}

IntMatrix &IntMatrix::operator=(const IntMatrix & rhs) {
  if(*this == rhs){
    return *this;
  }
    numRows =rhs.numRows;
    numColumns = rhs.numColumns;
    //
    rows = new IntArray*[numRows];
    for(int i=0;i<numRows;i++){
      rows[i] = new IntArray(*rhs.rows[i]);
    }
  
  return *this;
}

int IntMatrix::getRows() const {
  return numRows;
}
int IntMatrix::getColumns() const {
  return numColumns;
}
IntArray & IntMatrix::operator[](int index) const {
  assert(index>=0 && index<numRows);
    return *rows[index];
}

bool IntMatrix::operator==(const IntMatrix & rhs) const {
  if(numRows == rhs.numRows){
    if(numColumns == rhs.numColumns){
      for(int i=0; i<numRows;i++){
	for(int j=0;j<numColumns;j++){
	  if((*rows[i])[j] != (*rhs.rows[i])[j]){
	    return false; 
	    break;	  
	  }
	}
      }
      return true;
    }
    return false;
  }
  return false;
}

IntMatrix IntMatrix::operator+(const IntMatrix & rhs) const {
  assert((numRows == rhs.numRows)&&(numColumns ==rhs.numColumns));
  /*IntMatrix* answer = new IntMatrix(rhs);
  answer.rows = new IntArray*[numRows];

  for(int i=0; i<numRows;i++){
    answer.rows[i] = new IntArray(numColumns);
  }
  */
  IntMatrix answer;
  answer.numRows = numRows;
  answer.numColumns = numColumns;
  answer.rows = new IntArray*[numRows];
  for(int i=0; i<numRows;i++){
    answer.rows[i] = new IntArray(*rhs.rows[i]);
  }
  for(int i=0;i<numRows;i++){
    for(int j=0;j<numColumns;j++){
      answer[i][j] = rhs[i][j] + (*rows[i])[j];
    }
  }
  
  return answer;

}

};
std::ostream & operator<<(std::ostream & s, const IntMatrix & rhs) { 
  s<<"[";
  for(int i=0;i<rhs.getRows();i++){
    if(i<rhs.getRows()-1){
      s<<rhs[i]<<",";
    }
    s<<rhs[rhs.getRows()-1];
  }
  s <<"]";
  return s;
}
